{"version":3,"sources":["webpack:///./src/app/agent/agent.component.html","webpack:///./src/app/agent/agent.component.ts","webpack:///./src/app/agent/agent.module.ts","webpack:///./src/app/agent/agent.routing.ts","webpack:///./src/app/agent/table/history-table.component.html","webpack:///./src/app/agent/table/history-table.component.scss","webpack:///./src/app/agent/table/history-table.component.ts"],"names":[],"mappings":"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","file":"app-agent-agent-module.js","sourcesContent":["module.exports = \"<mat-tab-group>\\n    <mat-tab label=\\\"All Transactions\\\">\\n\\n        <ng-template matTabContent>\\n            <br/>\\n            <br/>\\n            <history-table [historyData]=\\\"allProcessedHistory\\\" *ngIf=\\\"isInitialised\\\"></history-table>\\n        </ng-template>\\n    </mat-tab>\\n\\n    <mat-tab label=\\\"Transactions for Trial\\\">\\n        <ng-template matTabContent>\\n            <br/>\\n            <form>\\n                <mat-form-field style=\\\"width: 75%;\\\">\\n                    <input type=\\\"text\\\" [formControl]=\\\"myControl\\\" matInput [matAutocomplete]=\\\"auto\\\">\\n                    <mat-autocomplete #auto=\\\"matAutocomplete\\\" [displayWith]=\\\"displayFn\\\">\\n                        <mat-option *ngFor=\\\"let trial of filteredOptions | async\\\" [value]=\\\"trial\\\">{{trial.studyName}}</mat-option>\\n                    </mat-autocomplete>\\n                </mat-form-field>&nbsp;&nbsp;\\n                <button mat-raised-button (click)=\\\"onTrialSelect()\\\" color=\\\"primary\\\">Select</button>\\n            </form>\\n            <history-table [historyData]=\\\"trialFilteredHistory\\\" *ngIf=\\\"isInitialised\\\"></history-table>\\n        </ng-template>\\n    </mat-tab>\\n\\n    <mat-tab label=\\\"Transactions by Type\\\">\\n\\n        <ng-template matTabContent>\\n            <br/>\\n            <mat-form-field style=\\\"width: 75%\\\">\\n                <mat-select placeholder=\\\"Select a transaction type\\\" [(value)]=\\\"selectedTransaction\\\">\\n                    <mat-option value='None'> - </mat-option>\\n                    <mat-option *ngFor=\\\"let entry of transactionTypes\\\" [value]=\\\"entry\\\">\\n                        {{ entry }}\\n                    </mat-option>\\n                </mat-select>\\n            </mat-form-field>&nbsp;&nbsp;\\n            <button mat-raised-button (click)=\\\"onTransactionSelect()\\\" color=\\\"primary\\\">Select</button>\\n\\n            <history-table [historyData]=\\\"filteredHistory\\\" *ngIf=\\\"isInitialised\\\"></history-table>\\n        </ng-template>\\n    </mat-tab>\\n</mat-tab-group>\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { HistorianRecord } from '../model/org.hyperledger.composer.system';\nimport { Trial } from '../model/ro.utcluj.clinictrial.trial';\nimport { HistorianService } from '../service/historian.service';\nimport { TrialService } from '../service/trial.service';\n\n@Component({\n    selector: 'agent',\n    templateUrl: 'agent.component.html'\n})\nexport class AgentComponent implements OnInit {\n\n    myControl = new FormControl();\n\n    private isInitialised = false;\n    private allHistory: HistorianRecord[] = [];\n    private allProcessedHistory: HistorianVO[] = [];\n    private filteredHistory: HistorianVO[] = [];\n    private trials: Trial[] = [];\n    private historyDataSource: MatTableDataSource<HistorianVO>;\n    private trialInput = \"\";\n    filteredOptions: Observable<Trial[]>;\n    private trialFilteredHistory: HistorianVO[] = [];\n\n    selectedTransaction = 'None';\n    transactionTypes = [\n        'CreateCustomForm',\n        'AddResearcherToTrial',\n        'RemoveResearcherFromTrial'\n    ]\n\n    constructor(\n        private _historianService: HistorianService,\n        private _trialService: TrialService\n    ) {\n        this.isInitialised = false;\n    }\n\n    ngOnInit() {\n        this.loadHistorian();\n\n    }\n\n    private _filter(value: string): Trial[] {\n        const filterValue = value.toLowerCase();\n\n        return this.trials.filter(option => option.studyName.toLowerCase().indexOf(filterValue) === 0);\n    }\n\n\n    loadHistorian() {\n        this._historianService.getAll().subscribe(\n            (res) => {\n                console.log(res);\n                this.allHistory = res;\n                this.processHistorian(this.allHistory);\n            }\n        )\n        this._trialService.getAll().subscribe(\n            (res) => {\n                this.trials = res;\n                this.filteredOptions = this.myControl.valueChanges\n                    .pipe(\n                        startWith<string | Trial>(''),\n                        map(value => typeof value === 'string' ? value : value.studyName),\n                        map(name => name ? this._filter(name) : this.trials.slice())\n                    );\n            }\n        )\n    }\n\n    displayFn(trial?: Trial): string | undefined {\n        return trial ? trial.studyName : undefined;\n    }\n\n    processHistorian(historian: HistorianRecord[]) {\n        for (let entry of historian) {\n            let target = new HistorianVO();\n            switch (entry.transactionType) {\n                case 'ro.utcluj.clinictrial.trial.CreateCustomForm': {\n                    target.transactionType = 'CreateCustomForm';\n                    target.transactionTimestamp = entry.transactionTimestamp.toLocaleString().replace('T', ' ').replace('Z', ' ').split('.')[0];\n                    target.participantInvoking = this.getParticipant(entry.participantInvoking);\n                    target.trial = entry.eventsEmitted[0].trial.idTrial;\n                    target.eventsEmitted = entry.eventsEmitted;\n                    target.customFormID = entry.eventsEmitted[0].form.idForm;\n                    this.allProcessedHistory.push(target);\n                } break;\n\n                case 'ro.utcluj.clinictrial.trial.AddResearcherToTrial': {\n                    target.transactionType = 'AddResearcherToTrial';\n                    target.transactionTimestamp = entry.transactionTimestamp.toLocaleString().replace('T', ' ').replace('Z', ' ').split('.')[0];\n                    target.participantInvoking = this.getParticipant(entry.participantInvoking);\n                    target.trial = entry.eventsEmitted[0].trial.idTrial;\n                    target.researcher = entry.eventsEmitted[0].researcher.idResearcher;\n                    this.allProcessedHistory.push(target);\n                } break;\n\n                case 'ro.utcluj.clinictrial.trial.RemoveResearcherFromTrial': {\n                    target.transactionType = 'RemoveResearcherFromTrial';\n                    target.transactionTimestamp = entry.transactionTimestamp.toLocaleString().replace('T', ' ').replace('Z', ' ').split('.')[0];\n                    target.participantInvoking = this.getParticipant(entry.participantInvoking);\n                    target.trial = entry.eventsEmitted[0].trial.idTrial;\n                    target.researcher = entry.eventsEmitted[0].researcher.idResearcher;\n                    this.allProcessedHistory.push(target);\n                }\n\n\n            }\n        }\n        console.log(this.allProcessedHistory);\n        this.historyDataSource = new MatTableDataSource<HistorianVO>(this.allProcessedHistory);\n        this.isInitialised = true;\n    }\n\n    private getParticipant(participantString): string {\n        let splitString: string[] = participantString.toLocaleString().split('.');\n        return splitString[splitString.length - 1];\n    }\n\n    private onTransactionSelect() {\n        if (this.selectedTransaction == 'None') {\n            alert(\"Please select a transaction type\");\n        } else {\n            console.log(this.selectedTransaction);\n            this.filteredHistory = this.allProcessedHistory.filter(\n                (entry) => entry.transactionType == this.selectedTransaction\n            );\n        }\n    }\n\n    private onTrialSelect(){   \n        this.trialFilteredHistory = this.allProcessedHistory.filter(\n            (entry) => \n                entry.trial == this.myControl.value.idTrial\n            )\n        console.log(this.trialFilteredHistory);\n    }\n\n    private filterByTransactionType(src, target): boolean {\n        return src == target;\n    }\n}\n\n\n\nexport class HistorianVO {\n    transactionId: string;\n    transactionType: string;\n    participantInvoking: any;\n    identityUsed: string;\n    eventsEmitted: Event[];\n    transactionTimestamp: string;\n    trial: string;\n    customFormID: string;\n    researcher: string;\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppMaterialModule } from '../material.module';\nimport { AgentRoutingModule } from './agent.routing';\nimport { HistorianService } from '../service/historian.service';\nimport { AgentComponent } from './agent.component';\nimport { HistoryTable } from './table/history-table.component';\nimport { ComponentModule } from '../components/component.module';\nimport { TrialService } from '../service/trial.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AgentRoutingModule,\n    AppMaterialModule,\n    FormsModule,\n    ComponentModule,\n    ReactiveFormsModule\n  ],\n  declarations: [\n    AgentComponent,\n    HistoryTable\n  ],\n  exports:[\n    HistoryTable\n  ],\n  providers: [\n    HistorianService,\n    TrialService\n  ]\n})\nexport class AgentModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AgentComponent } from './agent.component';\nconst routes: Routes = [\n  { path: '', component: AgentComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AgentRoutingModule { }\n","module.exports = \"<div *ngIf=\\\"displayTable\\\">\\n    <div class=\\\"example-container mat-elevation-z8\\\">\\n        <mat-table #table [dataSource]=\\\"historyDataSource\\\">\\n\\n            <!-- Patient ID column -->\\n            <ng-container matColumnDef=\\\"TransactionType\\\">\\n                <mat-header-cell *matHeaderCellDef> TransactionType </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let entry\\\"> {{entry.transactionType}} </mat-cell>\\n            </ng-container>\\n\\n            <!-- Patient ID column -->\\n            <ng-container matColumnDef=\\\"Date\\\">\\n                <mat-header-cell *matHeaderCellDef> Date </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let entry\\\"> {{entry.transactionTimestamp}} </mat-cell>\\n            </ng-container>\\n\\n            <!-- Patient ID column -->\\n            <ng-container matColumnDef=\\\"InvokingUserID\\\">\\n                <mat-header-cell *matHeaderCellDef> Invoking User ID </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let entry\\\"> {{entry.participantInvoking}} </mat-cell>\\n            </ng-container>\\n\\n            <!-- Patient ID column -->\\n            <ng-container matColumnDef=\\\"Trial\\\">\\n                <mat-header-cell *matHeaderCellDef> Trial </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let entry\\\">\\n                    {{entry.trial}} &nbsp;&nbsp;&nbsp;\\n                    <a mat-button (click)=\\\"viewTrial(entry.trial)\\\" color=\\\"primary\\\">\\n                        Go to trial {{entry.trial}}\\n                    </a>\\n                </mat-cell>\\n            </ng-container>\\n\\n            <ng-container matColumnDef=\\\"expandedDetail\\\">\\n                <mat-cell *matCellDef=\\\"let detail\\\">\\n                    <div class=\\\"marginAutoLR\\\" *ngIf=\\\"(detail.element.transactionType == 'CreateCustomForm')\\\">\\n                        <mat-card style=\\\"width:75vh; height: 30%\\\">\\n                            <mat-card-header>\\n                                <mat-card-title>\\n                                    <h2>Custom Form with ID = {{detail.element.customFormID}} was created by user {{detail.element.participantInvoking}}\\n                                        for trial with ID = {{detail.element.trial}}</h2>\\n                                </mat-card-title>\\n\\n                            </mat-card-header>\\n                            <mat-card-content>\\n                                <custom-form [idForm]=\\\"detail.element.customFormID\\\" [disabled]=\\\"true\\\"></custom-form>\\n                            </mat-card-content>\\n                        </mat-card>\\n                    </div>\\n                    <div class=\\\"marginAutoLR\\\" *ngIf=\\\"(detail.element.transactionType == 'AddResearcherToTrial') || (detail.element.transactionType == 'RemoveResearcherFromTrial')\\\">\\n                        <mat-card style=\\\"width:75vh; height: 30%\\\">\\n                            <mat-card-header>\\n                                <mat-card-title>\\n                                    <h2 *ngIf=\\\"(detail.element.transactionType == 'AddResearcherToTrial')\\\">User {{detail.element.participantInvoking}} granted acces to participant Researcher#{{detail.element.researcher}}\\n                                        for trial with ID = {{detail.element.trial}}</h2>\\n                                    <h2 *ngIf=\\\"(detail.element.transactionType == 'RemoveResearcherFromTrial')\\\">User {{detail.element.participantInvoking}} revoked acces to participant Researcher#{{detail.element.researcher}}\\n                                        for trial with ID = {{detail.element.trial}}</h2>\\n                                </mat-card-title>\\n\\n                            </mat-card-header>\\n                            <mat-card-content>\\n                            </mat-card-content>\\n                        </mat-card>\\n                    </div>\\n                    <br/>\\n                </mat-cell>\\n            </ng-container>\\n\\n            <mat-header-row *matHeaderRowDef=\\\"tableColumns\\\"></mat-header-row>\\n            <mat-row *matRowDef=\\\"let row; columns: tableColumns;\\\" matRipple class=\\\"element-row\\\" [class.expanded]=\\\"expandedElement == row\\\"\\n                (click)=\\\"expand(row)\\\"></mat-row>\\n            <mat-row *matRowDef=\\\"let row; columns: ['expandedDetail']; when: isExpansionDetailRow\\\" [@detailExpand]=\\\"row.element == expandedElement ? 'expanded' : 'collapsed'\\\"\\n                style=\\\"overflow: hidden\\\">\\n            </mat-row>\\n        </mat-table>\\n    </div>\\n</div>\"","module.exports = \".example-container {\\n  display: flex;\\n  flex-direction: column;\\n  max-height: 100%;\\n  min-width: 300px; }\\n\\n.mat-table {\\n  overflow: auto;\\n  max-height: 85vh; }\\n\\n.element-row {\\n  position: relative; }\\n\\n.element-row:not(.expanded) {\\n  cursor: pointer; }\\n\\n.element-row:not(.expanded):hover {\\n  background: gray; }\\n\\n.element-row.expanded {\\n  border-bottom-color: transparent; }\\n\"","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { DataSource } from '@angular/cdk/table';\nimport { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HistorianVO } from '../agent.component';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'history-table',\n    templateUrl: 'history-table.component.html',\n    styleUrls: ['history-table.component.scss'],\n    animations: [\n        trigger('detailExpand', [\n            state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),\n            state('expanded', style({ height: '*', visibility: 'visible' })),\n            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n        ]),\n    ],\n})\nexport class HistoryTable implements OnInit, OnChanges {\n\n    constructor(\n        private _router : Router\n    ){\n\n    }\n\n    @Input() historyData: HistorianVO[];\n\n    private displayTable = false;\n    private tableColumns = ['TransactionType', 'Date', 'InvokingUserID', 'Trial'];\n    isExpansionDetailRow = (i: number, row: Object) => row.hasOwnProperty('detailRow');\n    expandedElement: any;\n    private historyDataSource;\n    ngOnInit() {\n        this.historyDataSource = new HistoryDataSource(this.historyData);\n        this.displayTable = true;\n    }\n\n    ngOnChanges(){\n        this.historyDataSource = new HistoryDataSource(this.historyData);\n        \n    }\n\n    expand(row) {\n    \n        if (this.expandedElement && this.expandedElement === row) {\n            this.expandedElement = null;\n        } else {\n            this.expandedElement = row\n        }\n\n    }\n\n    viewTrial(idTrial){\n        this._router.navigateByUrl('/trial/view/' + idTrial);\n    }\n\n}\n\nexport class HistoryDataSource extends DataSource<any> {\n    constructor(\n        private historyEntries: any[]\n    ) {\n        super();\n    }\n    /** Connect function called by the table to retrieve one stream containing the data to render. */\n    connect(): Observable<Element[]> {\n        const rows = [];\n        this.historyEntries.forEach(element => rows.push(element, { detailRow: true, element }));\n        console.log(rows);\n        return Observable.of(rows);\n    }\n\n    disconnect() { }\n}\n"],"sourceRoot":""}
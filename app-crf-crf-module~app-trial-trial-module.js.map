{"version":3,"sources":["webpack:///./src/app/crf/crf.component.css","webpack:///./src/app/crf/crf.component.html","webpack:///./src/app/crf/crf.component.ts","webpack:///./src/app/crf/crf.module.ts","webpack:///./src/app/crf/crf.routing.ts"],"names":[],"mappings":"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","file":"app-crf-crf-module~app-trial-trial-module.js","sourcesContent":["module.exports = \".max-width {\\n    width: 100%;\\n  }\"","module.exports = \"<div class=\\\"center-div\\\">\\n    <mat-card class=\\\"description-card\\\">\\n        <mat-card-header>\\n            <div class=\\\"marginAutoLR\\\">\\n                <h1>\\n                    Form builder\\n                </h1>\\n            </div>\\n            <br/>\\n        </mat-card-header>\\n        <mat-card-content>\\n            <mat-divider></mat-divider>\\n            <mat-divider></mat-divider>\\n            <br/>\\n            <mat-form-field class=\\\"input-field-full-width\\\">\\n                <input matInput placeholder=\\\"Enter a name for the custom form...\\\" [(ngModel)]=\\\"customForm.name\\\">\\n            </mat-form-field>\\n            <mat-divider></mat-divider>\\n            <mat-divider></mat-divider>\\n            <div align=\\\"center\\\">\\n                <h3>\\n                    Form fields:\\n                </h3>\\n            </div>\\n            <mat-divider></mat-divider>\\n            <br/>\\n            <div style=\\\"display: table; margin: 0 auto; width: 75%\\\">\\n                <div *ngFor=\\\"let formEntry of formFields\\\">\\n                    <mat-divider></mat-divider>\\n                    <div *ngIf=\\\"formEntry.entryType == 0\\\">\\n                        <mat-form-field class=\\\"input-field-width\\\">\\n                            <input matInput placeholder=\\\"{{formEntry.entryName}}\\\">\\n\\n                        </mat-form-field>&nbsp;\\n                        <button mat-button (click)=\\\"removeField(formEntry)\\\">Remove</button>\\n                    </div>\\n                    <div *ngIf=\\\"formEntry.entryType == 1\\\">\\n                        <mat-radio-group class=\\\"input-field-width\\\">\\n                            <table>\\n                                <thead>{{formEntry.entryName}}</thead>\\n                                \\n                                <tbody>\\n                                    <tr>\\n                                        <div>\\n                                            <td *ngFor=\\\"let option of formEntry.entryOptions\\\">\\n                                                <mat-radio-button value=\\\"{{option}}\\\">{{option}}</mat-radio-button>\\n                                            </td>\\n                                            <td>\\n                                            <button mat-button (click)=\\\"removeField(formEntry)\\\">Remove</button>\\n                                        </td>\\n                                        </div>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </mat-radio-group>\\n                    </div>\\n                    <div *ngIf=\\\"formEntry.entryType == 2\\\">\\n                        <mat-form-field class=\\\"input-field-width\\\">\\n                            <mat-select placeholder=\\\"{{formEntry.entryName}}\\\" [(ngModel)]=\\\"formEntry.value\\\">\\n                                <mat-option *ngFor=\\\"let option of formEntry.entryOptions\\\" [value]=\\\"option\\\">\\n                                    {{option}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>&nbsp;\\n                        <button mat-button (click)=\\\"removeField(formEntry)\\\">Remove</button>\\n                        \\n                    </div>\\n                </div>\\n                <mat-divider></mat-divider>\\n            </div>\\n\\n            <br/>\\n            <div *ngIf=\\\"displayFormField\\\">\\n\\n                <mat-vertical-stepper [linear]=\\\"true\\\" #stepper>\\n                    <mat-step>\\n                        <form [formGroup]=\\\"fieldNameFormGroup\\\">\\n                            <ng-template matStepLabel>\\n                                Enter the new field name:\\n                            </ng-template>\\n                            <mat-form-field class=\\\"input-field-small\\\">\\n                                <input matInput placeholder=\\\"New field name\\\" [(ngModel)]=\\\"formField.entryName\\\" [ngModelOptions]=\\\"{standalone: true}\\\" required>\\n                            </mat-form-field>\\n                            <div>\\n                                <button mat-button matStepperNext>Next</button>\\n                                <button mat-button (click)=\\\"stepper.reset()  ; clearFormEntry()\\\">Cancel</button>\\n                            </div>\\n                        </form>\\n\\n                    </mat-step>\\n                    <mat-step *ngIf=\\\"(displayChoice || displaySelector)\\\">\\n                        <form [formGroup]=\\\"fieldNameFormGroup\\\">\\n                            <ng-template matStepLabel>\\n                                Enter the new field options:\\n                            </ng-template>\\n                            <mat-form-field class=\\\"max-width\\\">\\n                                <mat-chip-list #chipList>\\n                                    <mat-chip *ngFor=\\\"let header of dataHeaders\\\" [selectable]=\\\"selectable\\\" [removable]=\\\"removable\\\" (removed)=\\\"remove(header)\\\">\\n                                        {{header}}\\n                                        <mat-icon matChipRemove>cancel</mat-icon>\\n                                    </mat-chip>\\n                                    <input placeholder=\\\"Possible values for choice...\\\" [matChipInputFor]=\\\"chipList\\\" [matChipInputSeparatorKeyCodes]=\\\"separatorKeysCodes\\\"\\n                                        [matChipInputAddOnBlur]=\\\"addOnBlur\\\" (matChipInputTokenEnd)=\\\"add($event)\\\" />\\n                                </mat-chip-list>\\n                            </mat-form-field>\\n                            <div>\\n                                <button mat-button matStepperPrevious>Back</button>&nbsp;\\n                                <button mat-button matStepperNext>Next</button>&nbsp;\\n                                <button mat-button (click)=\\\"stepper.reset() ; clearFormEntry()\\\">Cancel</button>\\n\\n                            </div>\\n                        </form>\\n                    </mat-step>\\n                    <mat-step *ngIf=\\\"formField\\\">\\n                        <ng-template matStepLabel>Preview</ng-template>\\n                        <h5>This is a preview of the field that will be added to the form:</h5>\\n                        <div *ngIf=\\\"formField.entryType == 0\\\">\\n                            <mat-form-field class=\\\"input-field-small\\\">\\n                                <input matInput placeholder=\\\"{{formField.entryName}}\\\">\\n                            </mat-form-field>\\n                        </div>\\n                        <div *ngIf=\\\"formField.entryType == 1\\\">\\n                            <mat-radio-group>\\n                                <table>\\n                                    <thead>{{formField.entryName}}</thead>\\n                                    <tbody>\\n                                        <tr>\\n                                            <div>\\n                                                <td *ngFor=\\\"let option of dataHeaders\\\">\\n                                                    <mat-radio-button value=\\\"{{option}}\\\">{{option}}</mat-radio-button>\\n                                                </td>\\n                                            </div>\\n                                        </tr>\\n                                    </tbody>\\n                                </table>\\n                            </mat-radio-group>\\n                        </div>\\n                        <div *ngIf=\\\"formField.entryType == 2\\\">\\n                            <mat-form-field>\\n                                <mat-select placeholder=\\\"{{formField.entryName}}\\\" [(ngModel)]=\\\"formField.value\\\">\\n                                    <mat-option *ngFor=\\\"let option of dataHeaders\\\" [value]=\\\"option\\\">\\n                                        {{option}}\\n                                    </mat-option>\\n                                </mat-select>\\n                            </mat-form-field>\\n                        </div>\\n                        <mat-divider></mat-divider>\\n                        <br/>\\n                        <div>\\n                            <button mat-button matStepperPrevious>Back</button>&nbsp;\\n                            <button mat-button (click)=\\\"stepper.reset() ;  clearFormEntry()\\\">Cancel</button>\\n                            &nbsp;\\n                            <button mat-button (click)=\\\"addField()\\\"> Add</button>\\n                        </div>\\n                    </mat-step>\\n                </mat-vertical-stepper>\\n            </div>\\n            <br/>\\n            <div align=\\\"center\\\">\\n                <h4>\\n                    Choose the type of the new field\\n                </h4>\\n            </div>\\n\\n\\n            <!-- Container with the types of form fields -->\\n            <div align=\\\"center\\\">\\n                <button mat-raised-button [matMenuTriggerFor]=\\\"menu\\\" color=\\\"primary\\\">New input field</button>\\n                <mat-menu #menu=\\\"matMenu\\\">\\n                    <button mat-menu-item (click)=\\\"formFieldSelect()\\\">Text Field</button>\\n                    <button mat-menu-item (click)=\\\"choiceSelect()\\\">Choice</button>\\n                    <button mat-menu-item (click)=\\\"selectorSelect()\\\">Selector</button>\\n                </mat-menu>\\n            </div>\\n        </mat-card-content>\\n    </mat-card>\\n</div>\\n<br/>\\n<div>\\n\\n</div>\\n<div>\\n    <table>\\n        <tbody>\\n            <tr>\\n                <td>\\n                    <button mat-raised-button (click)=\\\"saveForm()\\\" style=\\\"float: right, top;\\\" color=\\\"primary\\\">Save</button>\\n                </td>\\n                <td>\\n                    <button mat-raised-button (click)=\\\"cancelForm()\\\" style=\\\"float: right, top;\\\" color=\\\"primary\\\">Cancel</button>\\n                </td>\\n            </tr>\\n        </tbody>\\n    </table>\\n\\n</div>\"","import { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CreateCustomForm, CustomForm, EntryType } from '../model/ro.utcluj.clinictrial.trial';\nimport { FormVO } from '../model/ro.utcluj.vo';\nimport { CustomFormService } from '../service/CustomForm.service';\nimport { TransactionService } from '../service/transaction-service';\nimport { IdProviderService } from '../utils/id-provider.service';\nimport { ResourceProvider } from '../utils/resource-provider';\n\n@Component({\n  selector: 'crf-component',\n  templateUrl: 'crf.component.html',\n  styleUrls: ['./crf.component.css']\n})\nexport class CRFComponent implements OnInit {\n  visible: boolean = true;\n  selectable: boolean = true;\n  removable: boolean = true;\n  addOnBlur: boolean = true;\n\n\n  dataHeaders = [];\n  separatorKeysCodes = [ENTER, COMMA];\n\n  formFields: FormVO[] = [];\n  formField: FormVO = new FormVO();\n  customForm = new CustomForm();\n  createFormTransaction = new CreateCustomForm();\n\n  displayFormField = false;\n  displayChoice = false;\n  displaySelector = false;\n  previewForm = false;\n\n  nameFormGroup;\n  fieldNameFormGroup;\n  fieldOptionsFormGroup;\n  idTrial;\n\n  constructor(\n    private _idProvider: IdProviderService,\n    private _customFormService: CustomFormService,\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _location: Location,\n    private _formBuilder: FormBuilder,\n    private _transactionService: TransactionService\n  ) {\n    var id = this._route.params\n      .subscribe(params => {\n        var id = params['idTrial'];\n        this.idTrial = id;\n        console.log(\"Building form for trial = \" + this.idTrial);\n      })\n  }\n\n  ngOnInit() {\n    this.clearFormEntry();\n    this.nameFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    this.fieldNameFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    this.fieldOptionsFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n  }\n\n  formFieldSelect() {\n    console.log(\"form field selected\")\n    this.displayFormField = true;\n    this.formField.entryType = EntryType.FORM_FIELD;\n  }\n\n  choiceSelect() {\n    console.log(\"Choice selected\")\n    this.displayFormField = true;\n    this.displayChoice = true;\n    this.formField.entryType = EntryType.CHOICE_FIELD;\n  }\n\n  selectorSelect() {\n    this.displayFormField = true;\n    this.displaySelector = true;\n    this.formField.entryType = EntryType.SELECTOR_FIELD;\n  }\n\n  addField() {\n    this.formField.entryOptions = this.dataHeaders;\n    this.formField.value = \"\";\n    this.formFields.push(this.formField);\n    console.log(this.formField);\n    this.clearFormEntry();\n    this.hideInputs();\n    console.log(this.formFields);\n  }\n  removeField(formEntry:FormVO){\n    var index = this.formFields.indexOf(formEntry);\n    this.formFields.splice(index, 1);\n  }\n\n  clearFormEntry() {\n    this.displayFormField = false;\n    this.displayChoice = false;\n    this.displaySelector = false;\n    this.formField = new FormVO();\n    this.formField.entryName = \"\";\n    this.formField.entryOptions = []\n    this.dataHeaders = [];\n    this.formField.value = \"\";\n  }\n\n  hideInputs() {\n    this.displayFormField = false;\n    this.displayChoice = false;\n    this.displaySelector = false;\n  }\n\n  saveForm() {\n\n    var formEntries: any[] = [];\n    for (let entry of this.formFields) {\n      formEntries.push(entry);\n    }\n\n    this.createFormTransaction.formMeta = formEntries;\n    this.createFormTransaction.idForm = this._idProvider.generateID();\n    this.createFormTransaction.trial = ResourceProvider.newTrialResource(this.idTrial);\n    this.createFormTransaction.dateCreated = this.generateTimestamp();\n    this.createFormTransaction.name = this.customForm.name;\n    console.log(JSON.stringify(this.createFormTransaction));\n    this._transactionService.createCustomForm(this.createFormTransaction)\n      .subscribe(\n        (res) => {\n          this._router.navigate([this._router.url]);\n        }\n      )\n  }\n\n  cancelForm() {\n    this._router.navigate([this._router.url]);\n  }\n\n  add(event: MatChipInputEvent): void {\n    let input = event.input;\n    let value = event.value;\n    console.log(value);\n    if ((value || '').trim()) {\n      this.dataHeaders.push(value.trim());\n    }\n    if (input) {\n      input.value = '';\n    }\n  }\n\n  remove(header: any): void {\n    let index = this.dataHeaders.indexOf(header);\n    if (index >= 0) {\n      this.dataHeaders.splice(index, 1);\n    }\n  }\n\n  generateTimestamp() {\n    var date = new Date();\n    return date.toLocaleDateString();\n  }\n}\n","import { CRFComponent } from './crf.component'\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AppMaterialModule } from '../material.module';\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\nimport { CRFRoutingModule } from './crf.routing';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IdProviderService } from '../utils/id-provider.service'\n@NgModule({\n    imports: [\n        AppMaterialModule,\n        CRFRoutingModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    providers: [\n        IdProviderService\n    ],\n    declarations: [\n        CRFComponent\n    ],\n    exports: [\n        CRFComponent\n    ]\n})\nexport class CRFModule { }","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CRFComponent } from './crf.component'\n\nconst routes: Routes = [\n  { path: '', component:  CRFComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CRFRoutingModule { }\n"],"sourceRoot":""}
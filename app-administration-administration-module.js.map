{"version":3,"sources":["webpack:///./src/app/administration/administration.component.html","webpack:///./src/app/administration/administration.component.ts","webpack:///./src/app/administration/administration.module.ts","webpack:///./src/app/administration/administration.routing.ts","webpack:///./src/app/administration/organisation/organisation-form.component.html","webpack:///./src/app/administration/organisation/organisation-form.component.ts","webpack:///./src/app/administration/patient/patient-form.component.html","webpack:///./src/app/administration/patient/patient-form.component.ts","webpack:///./src/app/administration/researcher/researcher-form.component.html","webpack:///./src/app/administration/researcher/researcher-from.component.ts","webpack:///./src/app/model/ro.utcluj.clinictrial.base.ts","webpack:///./src/app/model/ro.utcluj.clinictrial.organisation.ts","webpack:///./src/app/service/supply-organisation.service.ts"],"names":[],"mappings":"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","file":"app-administration-administration-module.js","sourcesContent":["module.exports = \"<mat-tab-group>\\n  <mat-tab label=\\\"Patients\\\">\\n    <br/>\\n\\n    <!-- the new patient button -->\\n    <div class=\\\"floating-button\\\">\\n      <a mat-fab routerLink=\\\"new\\\" color=\\\"primary\\\">\\n        <mat-icon aria-label=\\\"New Researcher\\\">add</mat-icon>\\n      </a>\\n    </div>\\n    <patient-table [allPatientsDataSource]=\\\"allPatientsDataSource\\\" adminMode=\\\"true\\\"></patient-table>\\n  </mat-tab>\\n  <mat-tab label=\\\"Organisations\\\">\\n    <br/>\\n\\n    <!-- the new organisation button -->\\n    <div class=\\\"floating-button\\\">\\n      <a mat-fab routerLink=\\\"neworg\\\" color=\\\"primary\\\">\\n        <mat-icon aria-label=\\\"New Organisation\\\">add</mat-icon>\\n      </a>\\n    </div>\\n    <div class=\\\"table-container mat-elevation-z8\\\">\\n      <mat-table #table [dataSource]=\\\"allOrganisationsDataSource\\\">\\n\\n        <!-- Organisation ID column -->\\n        <ng-container matColumnDef=\\\"OrganisationID\\\">\\n          <mat-header-cell *matHeaderCellDef> OrganisationID </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let organisation\\\"> {{organisation.orgID}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Organisation Name column -->\\n        <ng-container matColumnDef=\\\"Name\\\">\\n          <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let organisation\\\"> {{organisation.orgName}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Organisation Address column -->\\n        <ng-container matColumnDef=\\\"Address\\\">\\n          <mat-header-cell *matHeaderCellDef> Organisation Address </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let organisation\\\"> {{organisation.orgInternalAddress}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Organisation Type column -->\\n        <ng-container matColumnDef=\\\"Type\\\">\\n          <mat-header-cell *matHeaderCellDef> Organisation Type </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let organisation\\\"> {{organisation.orgType}} </mat-cell>\\n        </ng-container>\\n\\n\\n        <!-- Delete link column -->\\n        <ng-container matColumnDef=\\\"Actions\\\">\\n          <mat-header-cell *matHeaderCellDef> </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let organisation\\\">\\n            <a mat-button (click)=\\\"deleteOrganisation(organisation)\\\" color=\\\"primary\\\">\\n              <i class=\\\"material-icons\\\">delete_sweep</i>\\n            </a>\\n            <a mat-button [routerLink]=\\\"['neworg',organisation.orgID]\\\" color=\\\"primary\\\">\\n              <i class=\\\"material-icons\\\">mode_edit</i>\\n            </a>\\n          </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"organisationColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: organisationColumns;\\\"></mat-row>\\n      </mat-table>\\n    </div>\\n  </mat-tab>\\n  <mat-tab label=\\\"Researchers\\\">\\n    <br/>\\n\\n    <div class=\\\"floating-button\\\">\\n      <a mat-fab routerLink=\\\"newres\\\" color=\\\"primary\\\">\\n        <mat-icon aria-label=\\\"New Researcher\\\">add</mat-icon>\\n      </a>\\n    </div>\\n    <div class=\\\"table-container mat-elevation-z8\\\">\\n      <mat-table #table [dataSource]=\\\"allResearchersDataSource\\\">\\n\\n        <!-- Patient ID column -->\\n        <ng-container matColumnDef=\\\"ResearcherID\\\">\\n          <mat-header-cell *matHeaderCellDef> ResearcherID </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let researcher\\\"> {{researcher.idResearcher}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Name column -->\\n        <ng-container matColumnDef=\\\"Name\\\">\\n          <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let researcher\\\"> {{researcher.person.firstName}} {{researcher.person.lastName}} </mat-cell>\\n        </ng-container>\\n\\n        <!-- Gender column -->\\n        <ng-container matColumnDef=\\\"Gender\\\">\\n          <mat-header-cell *matHeaderCellDef> Gender </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let researcher\\\"> {{researcher.person.gender}}</mat-cell>\\n        </ng-container>\\n\\n        <!-- Birthdate column -->\\n        <ng-container matColumnDef=\\\"Birthdate\\\">\\n          <mat-header-cell *matHeaderCellDef> Birthdate </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let researcher\\\"> {{researcher.person.birthDetails.dateOfBirth}}</mat-cell>\\n        </ng-container>\\n\\n        <!-- Action link column -->\\n        <ng-container matColumnDef=\\\"Action\\\">\\n          <mat-header-cell *matHeaderCellDef></mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let researcher\\\">\\n            <a mat-button [routerLink]=\\\"['/view',researcher.idPatient]\\\" color=\\\"primary\\\">\\n              <i class=\\\"material-icons\\\">pageview</i>\\n            </a>\\n            <a mat-button [routerLink]=\\\"['newres',researcher.idResearcher]\\\" color=\\\"primary\\\">\\n              <i class=\\\"material-icons\\\">mode_edit</i>\\n            </a>\\n            <a mat-button (click)=\\\"deleteResearcher(researcher)\\\" color=\\\"primary\\\">\\n              <i class=\\\"material-icons\\\">delete_sweep</i>\\n            </a>\\n          </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"researcherColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: researcherColumns;\\\"></mat-row>\\n\\n      </mat-table>\\n    </div>\\n  </mat-tab>\\n</mat-tab-group>\"","import { Component, HostBinding, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatTableDataSource } from '@angular/material';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { Patient, Researcher } from '../model/ro.utcluj.clinictrial.base';\nimport { OrganisationVO } from '../model/ro.utcluj.vo';\nimport { PatientService } from '../service/patient.service';\nimport { ResearchSiteService } from '../service/research-site.service';\nimport { ResearcherService } from '../service/researcher.service';\nimport { SupplyOrganisationService } from '../service/supply-organisation.service';\nimport { LoaderService } from '../components/loader/loader.service';\n\n@Component({\n  selector: 'administration-component',\n  templateUrl: 'administration.component.html'\n})\nexport class AdministrationComponent implements OnInit {\n  //disable some annoying animations\n  @HostBinding('@.disabled')\n  private allPatients: Patient[] = [];\n  private allOrg: OrganisationVO[] = [];\n  private allResearchers: Researcher[] = [];\n  private errorMessage;\n  navigationSubscription;\n  allPatientsDataSource: MatTableDataSource<Patient>;\n  allOrganisationsDataSource: MatTableDataSource<OrganisationVO>;\n  allResearchersDataSource: MatTableDataSource<Researcher>;\n  displayedColumns = ['PatientID', 'Name', 'Gender', 'Birthdate', 'View', 'Edit', 'Delete'];\n  organisationColumns = ['OrganisationID', 'Name', 'Address', 'Type', 'Actions'];\n  researcherColumns = ['ResearcherID', 'Name', 'Gender', 'Birthdate', 'Action'];\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  constructor(\n    private _patientService: PatientService,\n    private _researchSiteService: ResearchSiteService,\n    private _supplyOrganisationService: SupplyOrganisationService,\n    private _researcerService: ResearcherService,\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _loaderService: LoaderService\n  ) {\n    this._loaderService.show();\n    this.navigationSubscription = this._router.events.subscribe((e: any) => {\n      // If it is a NavigationEnd event re-initalise the component\n      if (e instanceof NavigationEnd) {\n        console.log(\"loading table data....\")\n        this.loadAllPatients();\n        this.loadAllOrganisations();\n        this.loadAllResearchers();\n        console.log(this.allOrg);\n      }\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges() {\n\n  }\n\n  ngAfterViewInit() {\n    //  this.allPatientsDataSource.paginator = this.paginator;\n  }\n\n  loadAllResearchers() {\n    return this._researcerService.getAll()\n      .toPromise()\n      .then((result) => {\n        this.allResearchers = [];\n        this.errorMessage = null;\n        console.log(result)\n        result.forEach(participant => {\n          this.allResearchers.push(participant);\n        });\n        this.allResearchersDataSource = new MatTableDataSource<Researcher>(this.allResearchers);\n      })\n      .catch((error) => {\n        if (error == 'Server error') {\n          this.errorMessage = \"Could not connect to REST server. Please check your configuration details\";\n        }\n        else if (error == '404 - Not Found') {\n          this.errorMessage = \"404 - Could not find API route. Please check your available APIs.\"\n        }\n        else {\n          this.errorMessage = error;\n        }\n      });\n  }\n\n  loadAllOrganisations() {\n    this.allOrg = [];\n    this.loadAllReasearchSites();\n\n  }\n\n  loadAllSupplyOrgs() {\n    return this._supplyOrganisationService.getAll()\n      .toPromise()\n      .then((result) => {\n        this.errorMessage = null;\n        result.forEach(participant => {\n          let org = new OrganisationVO();\n          org.orgID = participant.idSupplyOrganisation;\n          org.orgName = participant.name;\n          if (participant.orgAddress) {\n            org.orgInternalAddress = participant.orgAddress.city + ', ' + participant.orgAddress.street;\n          }\n          org.orgType = \"SUPPLIER\";\n          this.allOrg.push(org);\n        });\n        // build the table data source\n        this.allOrganisationsDataSource = new MatTableDataSource<OrganisationVO>(this.allOrg);\n      })\n      .catch((error) => {\n        if (error == 'Server error') {\n          this.errorMessage = \"Could not connect to REST server. Please check your configuration details\";\n        }\n        else if (error == '404 - Not Found') {\n          this.errorMessage = \"404 - Could not find API route. Please check your available APIs.\"\n        }\n        else {\n          this.errorMessage = error;\n        }\n      });\n  }\n\n  loadAllReasearchSites(): Promise<any> {\n    return this._researchSiteService.getAll()\n      .toPromise()\n      .then((result) => {\n        this.errorMessage = null;\n        for (let participant of result) {\n          let org = new OrganisationVO();\n          org.orgID = participant.idResearchSite;\n          org.orgName = participant.name;\n          if (participant.orgAddress) {\n            org.orgInternalAddress = participant.orgAddress.city + ', ' + participant.orgAddress.street;\n          }\n          org.orgType = \"RESEARCH SITE\";\n          this.allOrg.push(org);\n        }\n        //load suppliers after all research sites have been added\n        this.loadAllSupplyOrgs();\n\n        this.allOrganisationsDataSource = new MatTableDataSource<OrganisationVO>(this.allOrg);\n      })\n      .catch((error) => {\n        if (error == 'Server error') {\n          this.errorMessage = \"Could not connect to REST server. Please check your configuration details\";\n        }\n        else if (error == '404 - Not Found') {\n          this.errorMessage = \"404 - Could not find API route. Please check your available APIs.\"\n        }\n        else {\n          this.errorMessage = error;\n        }\n      });\n  }\n\n  loadAllPatients(): Promise<any> {\n    return this._patientService.getAll()\n      .toPromise()\n      .then((result) => {\n        this.allPatients = [];\n        this.errorMessage = null;\n        console.log(result)\n        result.forEach(asset => {\n          this.allPatients.push(asset);\n        });\n        this.allPatientsDataSource = new MatTableDataSource<Patient>(this.allPatients);\n        this._loaderService.hide();\n      })\n      .catch((error) => {\n        if (error == 'Server error') {\n          this.errorMessage = \"Could not connect to REST server. Please check your configuration details\";\n        }\n        else if (error == '404 - Not Found') {\n          this.errorMessage = \"404 - Could not find API route. Please check your available APIs.\"\n        }\n        else {\n          this.errorMessage = error;\n        }\n        this._loaderService.hide();\n      });\n      \n  }\n\n  deletePatient(patient) {\n    console.log(patient.idPatient);\n    this._patientService.deleteAsset(patient.idPatient)\n      .toPromise()\n      .then(() => {\n        this.errorMessage = null;\n        this._router.navigate(['administration'])\n      })\n      .catch((error) => {\n        if (error == 'Server error') {\n          alert(\"Could not connect to REST server. Please check your configuration details\")\n        }\n        else if (error == '404 - Not Found') {\n          alert(\"404 - Could not find API route. Please check your available APIs.\")\n        }\n        else {\n          alert(error);\n        }\n      });\n  }\n\n\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ComponentModule } from '../components/component.module';\nimport { AppMaterialModule } from '../material.module';\nimport { PatientService } from '../service/patient.service';\nimport { ResearchSiteService } from '../service/research-site.service';\nimport { ResearcherService } from '../service/researcher.service';\nimport { SupplyOrganisationService } from '../service/supply-organisation.service';\nimport { AdministrationComponent } from './administration.component';\nimport { AdministrationRoutingModule } from './administration.routing';\nimport { OrganisationFormComponent } from './organisation/organisation-form.component';\nimport { PatientFormComponent } from './patient/patient-form.component';\nimport { ResearcherFormComponent } from './researcher/researcher-from.component';\n\n\n@NgModule({\n  imports: [\n    AdministrationRoutingModule,\n    AppMaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n    ComponentModule\n  ],\n  providers: [\n    PatientService,\n    ResearchSiteService,\n    SupplyOrganisationService,\n    ResearcherService\n  ],\n  declarations: [\n    AdministrationComponent,\n    PatientFormComponent,\n    OrganisationFormComponent,\n    ResearcherFormComponent,\n\n  ]\n})\nexport class AdministrationModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdministrationComponent } from './administration.component';\nimport { OrganisationFormComponent } from './organisation/organisation-form.component';\nimport { PatientFormComponent } from './patient/patient-form.component';\nimport { ResearcherFormComponent } from './researcher/researcher-from.component';\n\nconst routes: Routes = [\n  { path: '', component: AdministrationComponent },\n  { path: 'new', component: PatientFormComponent },\n  { path: 'new/:idPatient', component: PatientFormComponent },\n  { path: 'neworg', component: OrganisationFormComponent },\n  { path: 'neworg/:idOrg', component: OrganisationFormComponent },\n  { path: 'newres', component: ResearcherFormComponent },\n  { path: 'newres/:idResearcher', component: ResearcherFormComponent },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdministrationRoutingModule { }\n","module.exports = \"<h3>{{title}}</h3>\\n<div *ngIf=\\\"isInitialised\\\">\\n<form [formGroup] = \\\"organisationForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <table class=\\\"full-width\\\">\\n        <tr>\\n            <td>\\n                <mat-form-field class=\\\"full-width\\\">\\n                <input matInput type = \\\"text\\\" formControlName=\\\"orgName\\\" \\n                placeholder=\\\"Organisation Name\\\" [(value)]=\\\"this.internalVO.orgName\\\">\\n                <mat-error *ngIf=\\\"nameControl.errors\\n                  && (nameControl.touched || nameControl.dirty)\\\">\\n                Field is required and must have at least 2 characters</mat-error>\\n                </mat-form-field>\\n            </td>\\n        </tr>\\n        <tr>    \\n            <td>\\n                <mat-form-field>\\n                <mat-select [(value)]=\\\"this.internalVO.orgType\\\" \\n                    formControlName=\\\"orgType\\\"\\n                    placeholder = \\\"Organisation type\\\">\\n                    <mat-option value=\\\"RESEARCH\\\">Research Site</mat-option>\\n                    <mat-option value=\\\"SUPPLIER\\\">Supplier</mat-option>\\n                </mat-select>\\n                </mat-form-field>\\n            </td>\\n        </tr>  \\n        <tr>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"city\\\"\\n            placeholder=\\\"City\\\" [(value)]=\\\"this.internalVO.city\\\">\\n            <mat-error *ngIf=\\\"cityControl.errors \\n            && (cityControl.touched || cityControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"country\\\"\\n            placeholder=\\\"Country\\\" [(value)]=\\\"this.internalVO.country\\\">\\n            <mat-error *ngIf=\\\"countryControl.errors \\n            && (countryControl.touched || countryControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"region\\\" \\n            placeholder=\\\"Region\\\"  [(value)]=\\\"this.internalVO.region\\\">\\n            <mat-error *ngIf=\\\"regionControl.errors \\n            && (regionControl.touched || regionControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"street\\\" \\n            placeholder=\\\"Street\\\"  [(value)]=\\\"this.internalVO.street\\\">\\n            <mat-error *ngIf=\\\"streetControl.errors \\n            && (streetControl.touched || streetControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n    </tr>      \\n    </table>\\n\\n    <!--Submit button-->\\n    <div style=\\\"margin-bottom: 1em\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" \\n        [disabled]=\\\"organisationForm.invalid\\\">Save</button>\\n    </div>\\n</form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ResearchSite, SupplyOrganisation, Organisation } from '../../model/ro.utcluj.clinictrial.organisation';\nimport { OrganisationVO } from '../../model/ro.utcluj.vo';\nimport { ResearchSiteService } from '../../service/research-site.service';\nimport { SupplyOrganisationService } from '../../service/supply-organisation.service';\nimport { Address } from '../../model/ro.utcluj.clinictrial.base';\n\n@Component({\n  selector: 'organisation-form',\n  templateUrl: 'organisation-form.component.html'\n})\nexport class OrganisationFormComponent implements OnInit {\n\n  researchSite: ResearchSite = new ResearchSite();\n  supplyOrg: SupplyOrganisation = new SupplyOrganisation();\n  internalVO: OrganisationVO = new OrganisationVO();\n  organisationForm: FormGroup;\n  idOrg;\n  title;\n\n  // display the form after the initialisation is done\n  isInitialised = false;\n\n  //formControls\n  nameControl;\n  cityControl;\n  countryControl;\n  regionControl;\n  streetControl;\n  orgTypeControl;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _researchSiteService: ResearchSiteService,\n    private _supplyOrganisationService: SupplyOrganisationService,\n  ) {\n    //check if this is an update operation or a create one\n    var id = this._route.params\n      .subscribe(params => {\n        var id = params['idOrg'];\n        this.idOrg = id;\n        console.log(id);\n        //decide if the user wants to edit an existing patient or add a new one\n        this.title = id ? 'Edit patient info' : 'New patient'\n        if (!id) {\n          //instantiate the patient binding object\n          this.initBindings();\n          //create the form and validators\n          this.buildForm();\n          this.isInitialised = true;\n          console.log(\"Org form initialised\")\n          return;\n        }\n        //fetch organisation from data service\n        this._researchSiteService.getparticipant(id)\n          .subscribe(\n            (res) => {\n              this.researchSite = res;\n              console.log(res);\n              this.fillVO(this.researchSite);\n              this.internalVO.orgType = \"RESEARCH\";\n              this.buildForm();\n              this.isInitialised = true;\n              console.log(this.researchSite)\n\n            });\n        this._supplyOrganisationService.getparticipant(id)\n          .subscribe(\n            (res) => {\n              this.supplyOrg = res;\n              this.fillVO(this.supplyOrg);\n              this.internalVO.orgType = \"SUPPLIER\";\n              this.buildForm();\n              this.isInitialised = true;\n              console.log(this.supplyOrg)\n              console.log(res);\n            }\n          )\n      });\n  }\n\n  ngOnInit() {\n\n  }\n\n  onSubmit() {\n    var type = this.organisationForm.value.orgType;\n    this.fillObject(this.organisationForm.value, this.organisationForm.value.orgType);\n    var result;\n    if (type == \"SUPPLIER\") {\n      if (this.idOrg) {\n        this.supplyOrg.idSupplyOrganisation = \"\";\n        result = this._supplyOrganisationService\n          .updateParticipant(this.idOrg, this.supplyOrg);\n      } else {\n        this.supplyOrg.idSupplyOrganisation = this.generateID();\n        result = this._supplyOrganisationService\n          .addParticipant(this.supplyOrg);\n      }\n    } else if (type == \"RESEARCH\") {\n      if (this.idOrg) {\n        this.researchSite.idResearchSite = \"\";\n        result = this._researchSiteService\n          .updateParticipant(this.idOrg, this.researchSite);\n      } else {\n        this.researchSite.idResearchSite = this.generateID();\n        result = this._researchSiteService\n          .addParticipant(this.researchSite);\n      }\n    }\n    result.subscribe(\n      //saved succesfully - go back to administration\n      (data) => {\n        this._router.navigate(['administration'])\n      },\n      //error - notify user\n      (err) => {\n        alert(\"Error while saving. Please try again.\")\n      }\n    );\n  }\n\n  //generate a random id for new patients\n  generateID() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n\n  fillVO(org) {\n    this.internalVO.orgName = org.name;\n    if (org.orgAddress) {\n      this.internalVO.city = org.orgAddress.city;\n      this.internalVO.country = org.orgAddress.country;\n      this.internalVO.region = org.orgAddress.region;\n      this.internalVO.street = org.orgAddress.street;\n    } else {\n      this.internalVO.city = \"\";\n      this.internalVO.country = \"\";\n      this.internalVO.region = \"\";\n      this.internalVO.street = \"\";\n      org.orgAddress = new Address();\n    }\n  }\n\n  fillObject(org, orgType) {\n    if (orgType == \"SUPPLIER\") {\n      this.supplyOrg.name = org.orgName;\n      this.supplyOrg.orgAddress.city = org.city;\n      this.supplyOrg.orgAddress.country = org.country;\n      this.supplyOrg.orgAddress.region = org.region;\n      this.supplyOrg.orgAddress.street = org.street;\n      console.log(\"building supplier\");\n      console.log(this.supplyOrg);\n    } else {\n      this.researchSite.name = org.orgName;\n      this.researchSite.orgAddress.city = org.city;\n      this.researchSite.orgAddress.country = org.country;\n      this.researchSite.orgAddress.region = org.region;\n      this.researchSite.orgAddress.street = org.street;\n      console.log(\"building research site\");\n      console.log(this.researchSite)\n    }\n\n  }\n\n  buildForm() {\n    this.organisationForm = this.formBuilder.group({\n      orgName: this.formBuilder.\n        control(this.internalVO.orgName,\n          [Validators.required, Validators.minLength(2)]),\n      orgType: this.formBuilder.\n        control(this.internalVO.orgType,\n          [Validators.required]),\n      city: this.formBuilder.\n        control(this.internalVO.city,\n          [Validators.required, Validators.minLength(2)]),\n      country: this.formBuilder.\n        control(this.internalVO.country,\n          [Validators.required, Validators.minLength(2)]),\n      region: this.formBuilder.\n        control(this.internalVO.region,\n          [Validators.required, Validators.minLength(2)]),\n      street: this.formBuilder.\n        control(this.internalVO.street,\n          [Validators.required, Validators.minLength(2)]),\n    })\n    this.nameControl = this.organisationForm.get('orgName');\n    this.orgTypeControl = this.organisationForm.get('orgType');\n    this.cityControl = this.organisationForm.get('city');\n    this.countryControl = this.organisationForm.get('country');\n    this.regionControl = this.organisationForm.get('region');\n    this.streetControl = this.organisationForm.get('street');\n  }\n\n  initBindings() {\n    this.internalVO.orgName = \"\";\n    this.internalVO.orgType = \"\";\n    this.internalVO.city = \"\";\n    this.internalVO.country = \"\";\n    this.internalVO.locality = \"\";\n    this.internalVO.postalCode = \"\";\n    this.internalVO.region = \"\";\n    this.internalVO.street = \"\";\n    this.researchSite.orgAddress = new Address();\n    this.supplyOrg.orgAddress = new Address();\n  }\n}\n\n\n\n","module.exports = \"<h3>{{title}}</h3>\\n<div *ngIf=\\\"isInitialised\\\">\\n<form [formGroup] = \\\"patientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <table class=\\\"full-width\\\">\\n    <tr>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n          <input matInput type = \\\"text\\\" formControlName=\\\"firstName\\\" \\n          placeholder=\\\"First name\\\" [(value)]=\\\"patient.person.firstName\\\">\\n            <mat-error *ngIf=\\\"firstNameControl.errors\\n                  && (firstNameControl.touched || firstNameControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n      <mat-form-field class=\\\"full-width\\\">\\n          <input matInput type = \\\"text\\\" formControlName=\\\"lastName\\\" \\n           placeholder=\\\"Last name\\\" [(value)]=\\\"patient.person.lastName\\\">\\n          <mat-error *ngIf=\\\"lastNameControl.errors \\n            && (lastNameControl.touched || lastNameControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>  \\n      </mat-form-field>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>\\n      <mat-form-field>\\n        <mat-select [(value)]=\\\"patient.person.gender\\\" placeholder = \\\"Gender\\\">\\n          <mat-option value=\\\"MALE\\\">Male</mat-option>\\n          <mat-option value=\\\"FEMALE\\\">Female</mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"email\\\" \\n            placeholder=\\\"E-mail\\\" [(value)]=\\\"patient.person.contactDetails.email\\\">\\n        <mat-error *ngIf=\\\"emailControl.errors\\n            && (emailControl.touched || emailControl.dirty)\\\">\\n        Email is invalid</mat-error>      \\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\"  formControlName=\\\"phone\\\" \\n             placeholder=\\\"Phone\\\" [(value)]=\\\"patient.person.contactDetails.mobilePhone\\\">\\n        <mat-error *ngIf=\\\"phoneControl.errors\\n            && (phoneControl.touched || phoneControl.dirty)\\\">\\n        Phone number is invalid</mat-error>      \\n       \\n        </mat-form-field>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>\\n        <mat-form-field>\\n          <input matInput [matDatepicker]=\\\"picker\\\"  formControlName=\\\"picker\\\"\\n           placeholder=\\\"Birthdate\\\" [(value)]=\\\"patient.person.birthDetails.dateOfBirth\\\">\\n          <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n          <mat-datepicker #picker></mat-datepicker>\\n          <mat-error *ngIf=\\\"pickerControl.errors \\n            && (pickerControl.touched || pickerControl.dirty)\\\">\\n            Field is required</mat-error> \\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"placeOfBirth\\\"\\n            placeholder=\\\"Place of birth\\\" [(value)]=\\\"patient.person.birthDetails.placeOfBirth\\\">\\n            <mat-error *ngIf=\\\"placeOfBirthControl.errors \\n            && (placeOfBirthControl.touched || placeOfBirthControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error> \\n        </mat-form-field>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"city\\\"\\n            placeholder=\\\"City\\\" [(value)]=\\\"patient.person.contactDetails.address.city\\\">\\n            <mat-error *ngIf=\\\"cityControl.errors \\n            && (cityControl.touched || cityControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"country\\\"\\n            placeholder=\\\"Country\\\" [(value)]=\\\"patient.person.contactDetails.address.country\\\">\\n            <mat-error *ngIf=\\\"countryControl.errors \\n            && (countryControl.touched || countryControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"region\\\" \\n            placeholder=\\\"Region\\\"  [(value)]=\\\"patient.person.contactDetails.address.region\\\">\\n            <mat-error *ngIf=\\\"regionControl.errors \\n            && (regionControl.touched || regionControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n      <td>\\n        <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type = \\\"text\\\" formControlName=\\\"street\\\" \\n            placeholder=\\\"Street\\\"  [(value)]=\\\"patient.person.contactDetails.address.street\\\">\\n            <mat-error *ngIf=\\\"streetControl.errors \\n            && (streetControl.touched || streetControl.dirty)\\\">\\n            Field is required and must have at least 2 characters</mat-error>\\n        </mat-form-field>\\n      </td>\\n    </tr>\\n  </table>\\n  <div style=\\\"margin-bottom: 1em\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" \\n      [disabled]=\\\"patientForm.invalid\\\">Save</button>\\n  </div>\\n</form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Patient, Person, Gender, BirthDetails, Address, ContactDetails } from '../../model/ro.utcluj.clinictrial.base';\nimport { PatientService } from '../../service/patient.service'\n\n\n@Component({\n  selector: 'patient-form',\n  templateUrl: 'patient-form.component.html'\n})\nexport class PatientFormComponent implements OnInit{\n\n    patient : Patient = new Patient();\n    patientForm : FormGroup;\n    idPatient;\n    title;\n\n    // display the form after the initialisation is done\n    isInitialised = false;\n\n    //form controls\n    firstNameControl;\n    lastNameControl;\n    placeOfBirthControl;\n    pickerControl;\n    emailControl;\n    phoneControl;\n    cityControl;\n    countryControl;\n    regionControl;\n    streetControl;\n\n\n    constructor(        \n      private formBuilder: FormBuilder,\n      private _router : Router,\n      private _route : ActivatedRoute,\n      private _patientService : PatientService\n    ){\n      //check if this is an update operation or a create one\n      var id = this._route.params\n      .subscribe(params =>{\n          var id = params['idPatient'];\n          this.idPatient = id;\n          console.log(id);\n          //decide if the user wants to edit an existing patient or add a new one\n          this.title = id ? 'Edit patient info' : 'New patient'\n          if(!id){\n            //instantiate the patient binding object\n            this.initBindings();\n            //create the form and it's validators\n            this.buildForm(); \n            this.isInitialised = true;\n            return;\n          }\n          //update an existing patient => fetch it from data service\n          this._patientService.getAsset(id)\n              .subscribe(\n                  (res) =>{     \n                      this.patient = res;\n                      this.buildForm();\n                      this.isInitialised = true;\n                      console.log(this.patient)\n                      console.log(res);\n                  }\n              )\n       \n      });\n    }\n\n    buildForm(){\n      this.patientForm = this.formBuilder.group({\n        firstName: this.formBuilder.\n              control(this.patient.person.firstName, \n                [Validators.required, Validators.minLength(2)]),\n        lastName: this.formBuilder.\n              control(this.patient.person.lastName, \n                [Validators.required, Validators.minLength(2)]),\n        placeOfBirth: this.formBuilder.\n              control(this.patient.person.birthDetails.placeOfBirth, \n                [Validators.required, Validators.minLength(2)]),\n        picker: this.formBuilder.\n              control(this.patient.person.birthDetails.dateOfBirth,\n                [Validators.required]),\n        email: this.formBuilder.\n              control(this.patient.person.contactDetails.email, \n                [Validators.required, Validators.email]),\n        phone: this.formBuilder.\n              control(this.patient.person.contactDetails.mobilePhone, \n                [Validators.required, Validators.minLength(10),\n                Validators.maxLength(10), Validators.pattern('[0-9]{10}')]),\n        city: this.formBuilder.\n              control(this.patient.person.contactDetails.address.city, \n                [Validators.required, Validators.minLength(2)]),\n        country: this.formBuilder.\n              control(this.patient.person.contactDetails.address.country, \n                [Validators.required, Validators.minLength(2)]),\n        region: this.formBuilder.\n              control(this.patient.person.contactDetails.address.region, \n                [Validators.required, Validators.minLength(2)]),\n        street: this.formBuilder.\n              control(this.patient.person.contactDetails.address.street, \n                [Validators.required, Validators.minLength(2)]),              \n      })\n      this.firstNameControl = this.patientForm.get('firstName');\n      this.lastNameControl = this.patientForm.get('lastName');\n      this.placeOfBirthControl = this.patientForm.get('placeOfBirth');\n      this.pickerControl = this.patientForm.get('picker');\n      this.emailControl = this.patientForm.get('email');\n      this.phoneControl = this.patientForm.get('phone');\n      this.cityControl = this.patientForm.get('city');\n      this.countryControl = this.patientForm.get('country');\n      this.regionControl = this.patientForm.get('region');\n      this.streetControl = this.patientForm.get('street');\n    }\n\n    ngOnInit(){\n      this.initBindings();\n    }\n\n    onSubmit(){\n      this.fillObject(this.patientForm.value);\n      console.log(\"Saving object... :\");\n      console.log(this.patient);\n      var result;\n      if (this.idPatient){\n        this.patient.idPatient = \"\";\n        console.log(this.patient);\n        result = this._patientService.updateAsset(this.idPatient, this.patient);\n      } else {\n        this.patient.idPatient = this.generatePatientID();\n        result = this._patientService.addAsset(this.patient);\n      }    \n      result.subscribe(\n            //saved succesfully - go back to administration\n            (data) => {\n              this._router.navigate(['administration'])\n            },\n            //error - notify user\n            (err) => {\n              alert(\"Error while saving. Please try again.\")\n            }\n        );\n    }\n\n    //generate a random id for new patients\n    generatePatientID() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n\n    fillObject(values){\n      this.patient.person.firstName = values.firstName;\n      this.patient.person.lastName = values.lastName;\n      this.patient.person.contactDetails.email =  values.email;\n      this.patient.person.contactDetails.mobilePhone = values.phone;\n      this.patient.person.birthDetails.dateOfBirth = values.picker;\n      this.patient.person.birthDetails.placeOfBirth = values.placeOfBirth;\n      this.patient.person.contactDetails.address.city = values.city;\n      this.patient.person.contactDetails.address.country = values.country;\n      this.patient.person.contactDetails.address.region = values.region;\n      this.patient.person.contactDetails.address.street = values.street;\n    }\n\n    initBindings(){\n      this.patient.person = new Person();\n      this.patient.person.firstName = \"\";\n      this.patient.person.lastName = \"\";\n      this.patient.person.contactDetails = new ContactDetails();\n      this.patient.person.contactDetails.email = \"\";\n      this.patient.person.contactDetails.mobilePhone = \"\";\n      this.patient.person.birthDetails = new BirthDetails();\n      this.patient.person.birthDetails.placeOfBirth = \"\";\n      this.patient.person.contactDetails.address = new Address();\n      this.patient.person.contactDetails.address.city = \"\";\n      this.patient.person.contactDetails.address.country = \"\";\n      this.patient.person.contactDetails.address.region = \"\";\n      this.patient.person.contactDetails.address.street = \"\";\n    }\n}\n","module.exports = \"<h3>{{title}}</h3>\\n<div *ngIf=\\\"isInitialised\\\">\\n  <form [formGroup]=\\\"researcherForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <table class=\\\"full-width\\\">\\n      <tr>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"firstName\\\" placeholder=\\\"First name\\\" [(value)]=\\\"researcher.person.firstName\\\">\\n            <mat-error *ngIf=\\\"firstNameControl.errors\\n                  && (firstNameControl.touched || firstNameControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"lastName\\\" placeholder=\\\"Last name\\\" [(value)]=\\\"researcher.person.lastName\\\">\\n            <mat-error *ngIf=\\\"lastNameControl.errors \\n            && (lastNameControl.touched || lastNameControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>\\n          <mat-form-field>\\n            <mat-select [(value)]=\\\"researcher.person.gender\\\" placeholder=\\\"Gender\\\">\\n              <mat-option value=\\\"MALE\\\">Male</mat-option>\\n              <mat-option value=\\\"FEMALE\\\">Female</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"email\\\" placeholder=\\\"E-mail\\\" [(value)]=\\\"researcher.person.contactDetails.email\\\">\\n            <mat-error *ngIf=\\\"emailControl.errors\\n            && (emailControl.touched || emailControl.dirty)\\\">\\n              Email is invalid</mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"phone\\\" placeholder=\\\"Phone\\\" [(value)]=\\\"researcher.person.contactDetails.mobilePhone\\\">\\n            <mat-error *ngIf=\\\"phoneControl.errors\\n            && (phoneControl.touched || phoneControl.dirty)\\\">\\n              Phone number is invalid</mat-error>\\n\\n          </mat-form-field>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>\\n          <mat-form-field>\\n            <input matInput [matDatepicker]=\\\"picker\\\" formControlName=\\\"picker\\\" placeholder=\\\"Birthdate\\\" [(value)]=\\\"researcher.person.birthDetails.dateOfBirth\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #picker></mat-datepicker>\\n            <mat-error *ngIf=\\\"pickerControl.errors \\n            && (pickerControl.touched || pickerControl.dirty)\\\">\\n              Field is required</mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"placeOfBirth\\\" placeholder=\\\"Place of birth\\\" [(value)]=\\\"researcher.person.birthDetails.placeOfBirth\\\">\\n            <mat-error *ngIf=\\\"placeOfBirthControl.errors \\n            && (placeOfBirthControl.touched || placeOfBirthControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"city\\\" placeholder=\\\"City\\\" [(value)]=\\\"researcher.person.contactDetails.address.city\\\">\\n            <mat-error *ngIf=\\\"cityControl.errors \\n            && (cityControl.touched || cityControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"country\\\" placeholder=\\\"Country\\\" [(value)]=\\\"researcher.person.contactDetails.address.country\\\">\\n            <mat-error *ngIf=\\\"countryControl.errors \\n            && (countryControl.touched || countryControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"region\\\" placeholder=\\\"Region\\\" [(value)]=\\\"researcher.person.contactDetails.address.region\\\">\\n            <mat-error *ngIf=\\\"regionControl.errors \\n            && (regionControl.touched || regionControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n        <td>\\n          <mat-form-field class=\\\"full-width\\\">\\n            <input matInput type=\\\"text\\\" formControlName=\\\"street\\\" placeholder=\\\"Street\\\" [(value)]=\\\"researcher.person.contactDetails.address.street\\\">\\n            <mat-error *ngIf=\\\"streetControl.errors \\n            && (streetControl.touched || streetControl.dirty)\\\">\\n              Field is required and must have at least 2 characters</mat-error>\\n          </mat-form-field>\\n        </td>\\n      </tr>\\n      <!-- Search input for research centers -->\\n      <tr>\\n        <td>\\n          <input matInput type=\\\"text\\\" placeholder=\\\"Search a research center\\\" [(value)]=\\\"searchQuery\\\">\\n        </td>\\n        <td>\\n          <a mat-button (click)=\\\"search()\\\">Search</a>\\n        </td>\\n      </tr>\\n    </table>\\n    <br/>\\n    <!-- table that displays the search result -->\\n    <div *ngIf=\\\"searchActivate\\\">\\n      <table class=\\\"highlight\\\">\\n        <thead>\\n          <tr>\\n            <th>Name</th>\\n            <th>Select</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let res of searchResult\\\">\\n            <td>\\n              {{res.name}}\\n            </td>\\n            <td>\\n              <a mat-button (click)=\\\"onSelect(res)\\\">Select</a>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div *ngIf=\\\"selectionActivate\\\">\\n      <table>\\n        <tbody>\\n          <tr>\\n            <td>\\n              <h5>Organisation {{orgName}} selected</h5>\\n            </td>\\n            <td>\\n              <a mat-button (click)=\\\"onCancel()\\\">Cancel selection</a>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div style=\\\"margin-bottom: 1em\\\">\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"researcherForm.invalid\\\">Save</button>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Researcher, Person, Address, ContactDetails, BirthDetails } from '../../model/ro.utcluj.clinictrial.base'\nimport { ResearcherService } from '../../service/researcher.service'\nimport { ResearchSiteService } from '../../service/research-site.service';\nimport { IdProviderService } from '../../utils/id-provider.service';\nimport { ResourceProvider } from '../../utils/resource-provider';\nimport { ResearchSite } from '../../model/ro.utcluj.clinictrial.organisation';\n\n@Component({\n    selector: 'researcher-form',\n    templateUrl: 'researcher-form.component.html'\n})\nexport class ResearcherFormComponent implements OnInit {\n\n    researcher: Researcher = new Researcher();\n\n    researcherForm: FormGroup;\n    idResearcher;\n\n    //title for the displayed form\n    title;\n\n    // display the form after the initialisation is done\n    isInitialised = false;\n\n    //form view controls\n    searchActivate = false;\n    selectionActivate = false;\n    searchQuery = \"\"\n    orgName = \"\";\n    searchResult = [];\n\n    //form controls\n    firstNameControl;\n    lastNameControl;\n    placeOfBirthControl;\n    pickerControl;\n    emailControl;\n    phoneControl;\n    cityControl;\n    countryControl;\n    regionControl;\n    streetControl;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _researcherService: ResearcherService,\n        private _researchSiteService: ResearchSiteService,\n        private _idProvider: IdProviderService\n    ) {\n        //check if this is an update operation or a create one\n        var id = this._route.params\n            .subscribe(params => {\n                var id = params['idResearcher'];\n                this.idResearcher = id;\n                console.log(id);\n                //decide if the user wants to edit an existing researcher or add a new one\n                this.title = id ? 'Edit researcher info' : 'New researcher'\n                if (!id) {\n                    //instantiate the researcher binding object\n                    this.initBindings();\n                    //create the form and it's validators\n                    this.buildForm();\n                    this.isInitialised = true;\n                    return;\n                }\n                //update an existing researcher => fetch it from data service\n                this._researcherService.getparticipant(id)\n                    .subscribe(\n                        (res) => {\n                            this.researcher = res;\n                            this.buildForm();\n                            this.isInitialised = true;\n                            console.log(this.researcher)\n                            console.log(res);\n                        }\n                    )\n\n            });\n    }\n\n    ngOnInit() {\n        this.searchActivate = false;\n    }\n\n    search() {\n        this._researchSiteService.getAll().toPromise()\n            .then(\n                (res) => {\n                    this.searchResult = [];\n                    console.log(res)\n                    res.forEach(part => {\n                        this.searchResult.push(part);\n                    });\n                    this.searchActivate = true;\n                    (err) => {\n                        alert(\"Something went wrong while searching. Please try again!\")\n                    }\n                })\n    }\n\n    onSelect(res: ResearchSite) {\n        this.orgName = res.name;\n        this.researcher.employer = ResourceProvider.newResearchSiteResource(res.idResearchSite);\n        this.searchActivate = false;\n        this.selectionActivate = true;\n    }\n\n    onCancel() {\n        this.orgName = \"\";\n        this.researcher.employer = null;\n        this.searchActivate = true;\n        this.selectionActivate = false;\n    }\n\n    onSubmit() {\n        this.fillObject(this.researcherForm.value);\n        console.log(\"Saving object... :\");\n        console.log(this.researcher);\n        var result;\n        if (this.idResearcher) {\n            this.researcher.idResearcher = \"\";\n            result = this._researcherService.updateParticipant(this.idResearcher, this.researcher);\n        } else {\n            this.researcher.idResearcher = this._idProvider.generateID();\n            console.log(JSON.stringify(this.researcher));\n            result = this._researcherService.addParticipant(this.researcher);\n        }\n        result.subscribe(\n            //saved succesfully - go back to administration\n            (data) => {\n                this._router.navigate(['administration'])\n            },\n            //error - notify user\n            (err) => {\n                alert(\"Error while saving. Please try again.\")\n            }\n        );\n    }\n\n    fillObject(values) {\n        this.researcher.person.firstName = values.firstName;\n        this.researcher.person.lastName = values.lastName;\n        this.researcher.person.contactDetails.email = values.email;\n        this.researcher.person.contactDetails.mobilePhone = values.phone;\n        this.researcher.person.birthDetails.dateOfBirth = values.picker;\n        this.researcher.person.birthDetails.placeOfBirth = values.placeOfBirth;\n        this.researcher.person.contactDetails.address.city = values.city;\n        this.researcher.person.contactDetails.address.country = values.country;\n        this.researcher.person.contactDetails.address.region = values.region;\n        this.researcher.person.contactDetails.address.street = values.street;\n    }\n\n    buildForm() {\n        this.researcherForm = this.formBuilder.group({\n            firstName: this.formBuilder.\n                control(this.researcher.person.firstName,\n                    [Validators.required, Validators.minLength(2)]),\n            lastName: this.formBuilder.\n                control(this.researcher.person.lastName,\n                    [Validators.required, Validators.minLength(2)]),\n            placeOfBirth: this.formBuilder.\n                control(this.researcher.person.birthDetails.placeOfBirth,\n                    [Validators.required, Validators.minLength(2)]),\n            picker: this.formBuilder.\n                control(this.researcher.person.birthDetails.dateOfBirth,\n                    [Validators.required]),\n            email: this.formBuilder.\n                control(this.researcher.person.contactDetails.email,\n                    [Validators.required, Validators.email]),\n            phone: this.formBuilder.\n                control(this.researcher.person.contactDetails.mobilePhone,\n                    [Validators.required, Validators.minLength(10),\n                    Validators.maxLength(10), Validators.pattern('[0-9]{10}')]),\n            city: this.formBuilder.\n                control(this.researcher.person.contactDetails.address.city,\n                    [Validators.required, Validators.minLength(2)]),\n            country: this.formBuilder.\n                control(this.researcher.person.contactDetails.address.country,\n                    [Validators.required, Validators.minLength(2)]),\n            region: this.formBuilder.\n                control(this.researcher.person.contactDetails.address.region,\n                    [Validators.required, Validators.minLength(2)]),\n            street: this.formBuilder.\n                control(this.researcher.person.contactDetails.address.street,\n                    [Validators.required, Validators.minLength(2)]),\n        })\n        this.firstNameControl = this.researcherForm.get('firstName');\n        this.lastNameControl = this.researcherForm.get('lastName');\n        this.placeOfBirthControl = this.researcherForm.get('placeOfBirth');\n        this.pickerControl = this.researcherForm.get('picker');\n        this.emailControl = this.researcherForm.get('email');\n        this.phoneControl = this.researcherForm.get('phone');\n        this.cityControl = this.researcherForm.get('city');\n        this.countryControl = this.researcherForm.get('country');\n        this.regionControl = this.researcherForm.get('region');\n        this.streetControl = this.researcherForm.get('street');\n    }\n\n    initBindings() {\n        this.researcher.person = new Person();\n        this.researcher.person.firstName = \"\";\n        this.researcher.person.lastName = \"\";\n        this.researcher.person.contactDetails = new ContactDetails();\n        this.researcher.person.contactDetails.email = \"\";\n        this.researcher.person.contactDetails.mobilePhone = \"\";\n        this.researcher.person.birthDetails = new BirthDetails();\n        this.researcher.person.birthDetails.placeOfBirth = \"\";\n        this.researcher.person.contactDetails.address = new Address();\n        this.researcher.person.contactDetails.address.city = \"\";\n        this.researcher.person.contactDetails.address.country = \"\";\n        this.researcher.person.contactDetails.address.region = \"\";\n        this.researcher.person.contactDetails.address.street = \"\";\n    }\n}  ","import {Asset} from './org.hyperledger.composer.system';\nimport {Participant} from './org.hyperledger.composer.system';\nimport {Transaction} from './org.hyperledger.composer.system';\nimport {Event} from './org.hyperledger.composer.system';\nimport {ResearchSite,SupplyOrganisation} from './ro.utcluj.clinictrial.organisation';\n// export namespace ro.utcluj.clinictrial.base{\n   export enum Gender {\n      MALE,\n      FEMALE,\n      ALL,\n   }\n   export class Person {\n      firstName: string;\n      lastName: string;\n      gender: Gender;\n      contactDetails: ContactDetails;\n      birthDetails: BirthDetails;\n      deathDetails: DeathDetails;\n   }\n   export class ContactDetails {\n      email: string;\n      mobilePhone: string;\n      homePhone: string;\n      address: Address;\n   }\n   export class BirthDetails {\n      dateOfBirth: Date;\n      placeOfBirth: string;\n   }\n   export class DeathDetails {\n      dateOfDeath: Date;\n      placeOfDeath: string;\n   }\n   export class Address {\n      city: string;\n      country: string;\n      locality: string;\n      region: string;\n      street: string;\n      postalCode: string;\n   }\n   export abstract class ParticipantPerson extends Participant {\n      person: Person;\n   }\n   export class Researcher extends ParticipantPerson {\n      idResearcher: string;\n      employer: string;\n   }\n   export class Supplier extends ParticipantPerson {\n      idSupplier: string;\n      employer: SupplyOrganisation;\n   }\n   export class Patient extends Asset {\n      idPatient: string;\n      person: Person;\n      trial: string;\n   }\n// }\n","import {Asset} from './org.hyperledger.composer.system';\nimport {Participant} from './org.hyperledger.composer.system';\nimport {Transaction} from './org.hyperledger.composer.system';\nimport {Event} from './org.hyperledger.composer.system';\nimport {Address} from './ro.utcluj.clinictrial.base';\n// export namespace ro.utcluj.clinictrial.organisation{\n   export abstract class Organisation extends Participant {\n      name: string;\n      orgAddress: Address;\n   }\n   export class ResearchSite extends Organisation {\n      idResearchSite: string;\n   }\n   export class SupplyOrganisation extends Organisation {\n      idSupplyOrganisation: string;\n   }\n// }\n","import { Injectable } from '@angular/core';\nimport { DataService } from './data.service';\nimport { Observable } from 'rxjs';\nimport { SupplyOrganisation } from '../model/ro.utcluj.clinictrial.organisation';\nimport 'rxjs/Rx';\n\n// Can be injected into a constructor\n@Injectable()\nexport class SupplyOrganisationService {\n\n\t\n\t\tprivate NAMESPACE: string = 'SupplyOrganisation';\n\t\n\n\n\n    constructor(private dataService: DataService<SupplyOrganisation>) {\n    };\n\n    public getAll(): Observable<SupplyOrganisation[]> {\n        return this.dataService.getAll(this.NAMESPACE);\n    }\n\n    public getparticipant(id: any): Observable<SupplyOrganisation> {\n      return this.dataService.getSingle(this.NAMESPACE, id);\n    }\n\n    public addParticipant(itemToAdd: any): Observable<SupplyOrganisation> {\n      return this.dataService.add(this.NAMESPACE, itemToAdd);\n    }\n\n    public updateParticipant(id: any, itemToUpdate: any): Observable<SupplyOrganisation> {\n      return this.dataService.update(this.NAMESPACE, id, itemToUpdate);\n    }\n\n    public deleteParticipant(id: any): Observable<SupplyOrganisation> {\n      return this.dataService.delete(this.NAMESPACE, id);\n    }\n\n}\n"],"sourceRoot":""}